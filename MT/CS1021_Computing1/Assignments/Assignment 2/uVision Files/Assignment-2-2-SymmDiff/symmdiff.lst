


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             SymmDiff, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 EXPORT           start
    4 00000000         
    5 00000000         start
    6 00000000         
    7 00000000 E59F10F0        LDR              R1, =ASize
    8 00000004 E5911000        LDR              R1, [R1]    ;aCount 
    9 00000008 E59F20EC        LDR              R2, =AElems
   10 0000000C E59F90EC        LDR              R9, =CElems
   11 00000010 E3A07000        LDR              R7, =0      ;cSize = 0
   12 00000014         
   13 00000014         while1
   14 00000014 E3510000        CMP              R1, #0      ;while(aCount != 0)
                                                            
   15 00000018 0A000016        BEQ              moveBElems  ;{
   16 0000001C         
   17 0000001C E5923000        LDR              R3, [R2]    ; load aVal
   18 00000020 E59F80DC        LDR              R8, =BElems ;
   19 00000024 E5984000        LDR              R4, [R8]    ; load bVal
   20 00000028 E59F50D8        LDR              R5, =BSize  ;
   21 0000002C E5955000        LDR              R5, [R5]    ; load bSize
   22 00000030         
   23 00000030         while2
   24 00000030 E3550000        CMP              R5, #0      ;while (bSize != 0)
                                                            
   25 00000034 0A000009        BEQ              moveAVal    ;{
   26 00000038         
   27 00000038 E0436004        SUB              R6, R3, R4  ; result = aVal - b
                                                            Val
   28 0000003C         
   29 0000003C E3560000        CMP              R6, #0      ; if(result = 0)
   30 00000040 1A000002        BNE              elseDo      ; {
   31 00000044 E2411001        SUB              R1, R1, #1  ;  aCount--
   32 00000048 E2822004        ADD              R2, R2, #4  ;  aAddress++
   33 0000004C EAFFFFF0        B                while1      ;}
   34 00000050         
   35 00000050         elseDo                               ; else{
   36 00000050 E2888004        ADD              R8, R8, #4  ; bAddress++
   37 00000054 E5984000        LDR              R4, [R8]    ; load next bVal
   38 00000058 E2455001        SUB              R5, R5, #1  ; bCount--
   39 0000005C EAFFFFF3        B                while2      ; }
   40 00000060         
   41 00000060         moveAVal
   42 00000060 E5893000        STR              R3, [R9]    ; store aVal
   43 00000064 E2899004        ADD              R9, R9, #4  ; cSetAddress++
   44 00000068 E2877001        ADD              R7, R7, #1  ; cSize++
   45 0000006C E2822004        ADD              R2, R2, #4  ; aAddress++
   46 00000070 E2411001        SUB              R1, R1, #1  ; aCount--
   47 00000074 EAFFFFE6        B                while1      ; }
   48 00000078         
   49 00000078         moveBElems
   50 00000078 E59F108C        LDR              R1, =CSize
   51 0000007C E5817000        STR              R7, [R1]    ; storeCSize
   52 00000080 E59F207C        LDR              R2, =BElems ;
   53 00000084 E59F407C        LDR              R4, =BSize  ;
   54 00000088 E5944000        LDR              R4, [R4]    ; load bSize
   55 0000008C         
   56 0000008C         bWhile1



ARM Macro Assembler    Page 2 


   57 0000008C E3540000        CMP              R4, #0      ;while(bSize!=0)
   58 00000090 0A000017        BEQ              stop        ;{
   59 00000094 E5923000        LDR              R3, [R2]    ; load bVal
   60 00000098 E59F505C        LDR              R5, =AElems ;
   61 0000009C E59F8054        LDR              R8, =ASize  ;
   62 000000A0 E59F1064        LDR              R1, =CSize  ;
   63 000000A4 E598A000        LDR              R10, [R8]   ; load aSize
   64 000000A8         
   65 000000A8         bWhile2
   66 000000A8 E35A0000        CMP              R10, #0     ;while(aSize!=0)
   67 000000AC 0A000009        BEQ              storeBVal   ;{
   68 000000B0         
   69 000000B0 E5956000        LDR              R6, [R5]    ; load aVal
   70 000000B4 E046B003        SUB              R11, R6, R3 ; result = aVal - b
                                                            Val
   71 000000B8 E35B0000        CMP              R11, #0     ; if(result=0)
   72 000000BC 1A000002        BNE              nextCVal    ; {
   73 000000C0 E2822004        ADD              R2, R2, #4  ;   bValAddress++
   74 000000C4 E2444001        SUB              R4, R4, #1  ;   bSize--
   75 000000C8 EAFFFFEF        B                bWhile1     ; }
   76 000000CC         
   77 000000CC         nextCVal
   78 000000CC E2855004        ADD              R5, R5, #4  ; aValAddress++
   79 000000D0 E24AA001        SUB              R10, R10, #1 ; aSize--
   80 000000D4 EAFFFFF3        B                bWhile2
   81 000000D8         
   82 000000D8         storeBVal
   83 000000D8 E5893000        STR              R3, [R9]    ; store bVal into c
                                                            Set
   84 000000DC E2899004        ADD              R9, R9, #4  ; cSetAddress++
   85 000000E0 E2877001        ADD              R7, R7, #1  ; cSize++
   86 000000E4 E5817000        STR              R7, [R1]    ; storeCSize
   87 000000E8 E2822004        ADD              R2, R2, #4  ; bValAddress++
   88 000000EC E2444001        SUB              R4, R4, #1  ; bSize--
   89 000000F0 EAFFFFE5        B                bWhile1
   90 000000F4         
   91 000000F4 EAFFFFFE 
                       stop    B                stop
   92 000000F8         
   93 000000F8         
   94 000000F8 00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000         AREA             TestData, DATA, READWRITE
   95 00000000         
   96 00000000 00000004 
                       ASize   DCD              4           ; Number of element
                                                            s in A
   97 00000004 0000007B 
              0000001C 
              00000066 
              00000003 AElems  DCD              123, 28, 102, 3 ; Elements of A



ARM Macro Assembler    Page 3 


                                                            
   98 00000014         
   99 00000014 00000002 
                       BSize   DCD              2           ; Number of element
                                                            s in B
  100 00000018 00000780 
              00000027 BElems  DCD              1920, 39    ; Elements of B
  101 00000020         
  102 00000020 00000000 
                       CSize   DCD              0           ; Number of element
                                                            s in C (SymDifferen
                                                            ce / !Union)
  103 00000024 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    CElems  SPACE            56          ; Elements of C
  104 0000005C         
  105 0000005C         
  106 0000005C                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\s
ymmdiff.d -o.\symmdiff.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Inclu
de -IC:\Keil_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --predefine="__MICR
OLIB SETA 1" --predefine="__UVISION_VERSION SETA 521" --predefine="NO_CLOCK_SET
UP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC SETA 1" --
predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\symmdiff.lst Sy
mmDiff.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

SymmDiff 00000000

Symbol: SymmDiff
   Definitions
      At line 1 in file SymmDiff.s
   Uses
      None
Comment: SymmDiff unused
bWhile1 0000008C

Symbol: bWhile1
   Definitions
      At line 56 in file SymmDiff.s
   Uses
      At line 75 in file SymmDiff.s
      At line 89 in file SymmDiff.s

bWhile2 000000A8

Symbol: bWhile2
   Definitions
      At line 65 in file SymmDiff.s
   Uses
      At line 80 in file SymmDiff.s
Comment: bWhile2 used once
elseDo 00000050

Symbol: elseDo
   Definitions
      At line 35 in file SymmDiff.s
   Uses
      At line 30 in file SymmDiff.s
Comment: elseDo used once
moveAVal 00000060

Symbol: moveAVal
   Definitions
      At line 41 in file SymmDiff.s
   Uses
      At line 25 in file SymmDiff.s
Comment: moveAVal used once
moveBElems 00000078

Symbol: moveBElems
   Definitions
      At line 49 in file SymmDiff.s
   Uses
      At line 15 in file SymmDiff.s
Comment: moveBElems used once
nextCVal 000000CC

Symbol: nextCVal
   Definitions
      At line 77 in file SymmDiff.s
   Uses
      At line 72 in file SymmDiff.s
Comment: nextCVal used once
start 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: start
   Definitions
      At line 5 in file SymmDiff.s
   Uses
      At line 3 in file SymmDiff.s
Comment: start used once
stop 000000F4

Symbol: stop
   Definitions
      At line 91 in file SymmDiff.s
   Uses
      At line 58 in file SymmDiff.s
      At line 91 in file SymmDiff.s

storeBVal 000000D8

Symbol: storeBVal
   Definitions
      At line 82 in file SymmDiff.s
   Uses
      At line 67 in file SymmDiff.s
Comment: storeBVal used once
while1 00000014

Symbol: while1
   Definitions
      At line 13 in file SymmDiff.s
   Uses
      At line 33 in file SymmDiff.s
      At line 47 in file SymmDiff.s

while2 00000030

Symbol: while2
   Definitions
      At line 23 in file SymmDiff.s
   Uses
      At line 39 in file SymmDiff.s
Comment: while2 used once
12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

AElems 00000004

Symbol: AElems
   Definitions
      At line 97 in file SymmDiff.s
   Uses
      At line 9 in file SymmDiff.s
      At line 60 in file SymmDiff.s

ASize 00000000

Symbol: ASize
   Definitions
      At line 96 in file SymmDiff.s
   Uses
      At line 7 in file SymmDiff.s
      At line 61 in file SymmDiff.s

BElems 00000018

Symbol: BElems
   Definitions
      At line 100 in file SymmDiff.s
   Uses
      At line 18 in file SymmDiff.s
      At line 52 in file SymmDiff.s

BSize 00000014

Symbol: BSize
   Definitions
      At line 99 in file SymmDiff.s
   Uses
      At line 20 in file SymmDiff.s
      At line 53 in file SymmDiff.s

CElems 00000024

Symbol: CElems
   Definitions
      At line 103 in file SymmDiff.s
   Uses
      At line 10 in file SymmDiff.s
Comment: CElems used once
CSize 00000020

Symbol: CSize
   Definitions
      At line 102 in file SymmDiff.s
   Uses
      At line 50 in file SymmDiff.s
      At line 62 in file SymmDiff.s

TestData 00000000

Symbol: TestData
   Definitions
      At line 94 in file SymmDiff.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      None
Comment: TestData unused
7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file SymmDiff.s
   Uses
      None
Comment: main unused
1 symbol
360 symbols in table
