


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             Anagram, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 EXPORT           start
    4 00000000         
    5 00000000         start
    6 00000000 E59F10E8        LDR              R1, =stringA
    7 00000004 E59F20E8        LDR              R2, =stringB
    8 00000008         
    9 00000008         changeACase
   10 00000008 E5D13000        LDRB             R3, [R1]    ;testChar = get.fir
                                                            st(stringA)
   11 0000000C E3530000        CMP              R3, #0x00   ;while(testChar != 
                                                            0x00)
   12 00000010 0A000005        BEQ              changeBCase ;{
   13 00000014 E3530061        CMP              R3, #'a'    ; if(testChar == hi
                                                            gherCase)
   14 00000018 2A000001        BHS              nextAChar   ; {
   15 0000001C E2833020        ADD              R3, R3, #0x20 ;  changeToLowerC
                                                            ase(testChar)
   16 00000020 E5C13000        STRB             R3, [R1]    ;  storeChar(testCh
                                                            ar)
   17 00000024         nextAChar
   18 00000024 E2811001        ADD              R1, R1, #1  ;  testCharAddress 
                                                            ++
   19 00000028 EAFFFFF6        B                changeACase ; }
   20 0000002C         ; }
   21 0000002C         
   22 0000002C         changeBCase
   23 0000002C E5D24000        LDRB             R4, [R2]    ;testChar = get.fir
                                                            st(stringA)
   24 00000030 E3540000        CMP              R4, #0x00   ;while(testChar != 
                                                            0x00)
   25 00000034 0A000005        BEQ              testStrings ;{
   26 00000038 E3540061        CMP              R4, #'a'    ; if(testChar == hi
                                                            gherCase)
   27 0000003C 2A000001        BHS              nextBChar   ; {
   28 00000040 E2844020        ADD              R4, R4, #0x20 ;  changeToLowerC
                                                            ase(testChar)
   29 00000044 E5C24000        STRB             R4, [R2]    ;  storeChar(testCh
                                                            ar)
   30 00000048         nextBChar
   31 00000048 E2822001        ADD              R2, R2, #1  ;  testCharAddress 
                                                            ++
   32 0000004C EAFFFFF6        B                changeBCase ; }
   33 00000050         ; }
   34 00000050         
   35 00000050         testStrings
   36 00000050 E59F1098        LDR              R1, =stringA
   37 00000054 E59F2098        LDR              R2, =stringB
   38 00000058         
   39 00000058 E5D13000        LDRB             R3, [R1]    ;load testChar
   40 0000005C         
   41 0000005C E3530000 
                       while1  CMP              R3, #0x00   ;while1 (testChar !
                                                            = 0x00)
   42 00000060 0A000016        BEQ              checkStringB ;{
   43 00000064 E59F5088        LDR              R5, =stringB 
                                                            ;stringBAddressCopy
                                                            



ARM Macro Assembler    Page 2 


   44 00000068 E5D54000        LDRB             R4, [R5]    ;compareChar = get.
                                                            first(stringB)
   45 0000006C         
   46 0000006C E3540020 
                       while2  CMP              R4, #0x20   ;while(compareChar 
                                                            = SPACE)
   47 00000070 1A000005        BNE              continue
   48 00000074 E2855001        ADD              R5,R5, #1   ; stringB++
   49 00000078 E5D54000        LDRB             R4, [R5]    ; compareChar = get
                                                            .next(StringB)
   50 0000007C E3540000        CMP              R4, #0x00   ; if (compareChar =
                                                             0x00)
   51 00000080 1AFFFFF9        BNE              while2      ; {
   52 00000084 E3A00001        LDR              R0, =1      ;  anagram =true
   53 00000088 EA000017        B                stop        ; }
   54 0000008C         
   55 0000008C         continue
   56 0000008C E3540000 
                       while3  CMP              R4, #0x00   ;while3 (compareCha
                                                            r !=0x00)
   57 00000090 0A000012        BEQ              anFalse     ;{
   58 00000094 E0437004        SUB              R7, R3, R4  ; result = testChar
                                                             - compareChar
   59 00000098         
   60 00000098 E3570000        CMP              R7, #0x00   ; if (result = 0)
   61 0000009C 1A000004        BNE              elseB       ; {
   62 000000A0 E3A04020        LDR              R4, =0x20   ;  setCompareChar =
                                                             SPACE 
   63 000000A4 E5C54000        STRB             R4, [R5]    ;  storeOverwrite
   64 000000A8 E2811001        ADD              R1, R1, #1  ;  addressA++
   65 000000AC E5D13000        LDRB             R3, [R1]    ;  testChar = get.n
                                                            ext(stringA)
   66 000000B0 EAFFFFE9        B                while1      ; }
   67 000000B4         ; else
   68 000000B4         ; {
   69 000000B4 E2855001 
                       elseB   ADD              R5,R5, #1   ; stringB++
   70 000000B8 E5D54000        LDRB             R4, [R5]    ;compareChar = get.
                                                            next(StringB)
   71 000000BC EAFFFFF2        B                while3      ; }
   72 000000C0         ;}
   73 000000C0         checkStringB
   74 000000C0 E59F202C        LDR              R2, =stringB
   75 000000C4         stringCheckWh
   76 000000C4 E5D21000        LDRB             R1, [R2]    ;while( bChar != 0x
                                                            00 && bChar == SPAC
                                                            E Flag)
   77 000000C8 E3510000        CMP              R1, #0x00   ;{
   78 000000CC 0A000005        BEQ              anTrue      ;
   79 000000D0 E3510020        CMP              R1, #0x20   ;
   80 000000D4 1A000001        BNE              anFalse     ;
   81 000000D8 E2822001        ADD              R2, R2, #1  ; bChar Address++
   82 000000DC EAFFFFF8        B                stringCheckWh ;}
   83 000000E0         
   84 000000E0 E3A00000 
                       anFalse LDR              R0, =0      ; anagram = 0
   85 000000E4 EA000000        B                stop
   86 000000E8         
   87 000000E8 E3A00001 



ARM Macro Assembler    Page 3 


                       anTrue  LDR              R0, =1      ; anagram = 1
   88 000000EC         
   89 000000EC EAFFFFFE 
                       stop    B                stop
   90 000000F0         
   91 000000F0         
   92 000000F0         
   93 000000F0 00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000         AREA             TestData, DATA, READWRITE
   94 00000000         
   95 00000000 42 65 73 
              74 20 74 
              61 63 6F 
              73 00    stringA DCB              "Best tacos",0
   96 0000000B 42 45 53 
              54 20 63 
              6F 61 74 
              73 00    stringB DCB              "BEST coats",0
   97 00000016         
   98 00000016                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\a
nagram.d -o.\anagram.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include
 -IC:\Keil_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --predefine="__MICROL
IB SETA 1" --predefine="__UVISION_VERSION SETA 521" --predefine="NO_CLOCK_SETUP
 SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC SETA 1" --pr
edefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\anagram.lst Anagr
am.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Anagram 00000000

Symbol: Anagram
   Definitions
      At line 1 in file Anagram.s
   Uses
      None
Comment: Anagram unused
anFalse 000000E0

Symbol: anFalse
   Definitions
      At line 84 in file Anagram.s
   Uses
      At line 57 in file Anagram.s
      At line 80 in file Anagram.s

anTrue 000000E8

Symbol: anTrue
   Definitions
      At line 87 in file Anagram.s
   Uses
      At line 78 in file Anagram.s
Comment: anTrue used once
changeACase 00000008

Symbol: changeACase
   Definitions
      At line 9 in file Anagram.s
   Uses
      At line 19 in file Anagram.s
Comment: changeACase used once
changeBCase 0000002C

Symbol: changeBCase
   Definitions
      At line 22 in file Anagram.s
   Uses
      At line 12 in file Anagram.s
      At line 32 in file Anagram.s

checkStringB 000000C0

Symbol: checkStringB
   Definitions
      At line 73 in file Anagram.s
   Uses
      At line 42 in file Anagram.s
Comment: checkStringB used once
continue 0000008C

Symbol: continue
   Definitions
      At line 55 in file Anagram.s
   Uses
      At line 47 in file Anagram.s
Comment: continue used once
elseB 000000B4



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: elseB
   Definitions
      At line 69 in file Anagram.s
   Uses
      At line 61 in file Anagram.s
Comment: elseB used once
nextAChar 00000024

Symbol: nextAChar
   Definitions
      At line 17 in file Anagram.s
   Uses
      At line 14 in file Anagram.s
Comment: nextAChar used once
nextBChar 00000048

Symbol: nextBChar
   Definitions
      At line 30 in file Anagram.s
   Uses
      At line 27 in file Anagram.s
Comment: nextBChar used once
start 00000000

Symbol: start
   Definitions
      At line 5 in file Anagram.s
   Uses
      At line 3 in file Anagram.s
Comment: start used once
stop 000000EC

Symbol: stop
   Definitions
      At line 89 in file Anagram.s
   Uses
      At line 53 in file Anagram.s
      At line 85 in file Anagram.s
      At line 89 in file Anagram.s

stringCheckWh 000000C4

Symbol: stringCheckWh
   Definitions
      At line 75 in file Anagram.s
   Uses
      At line 82 in file Anagram.s
Comment: stringCheckWh used once
testStrings 00000050

Symbol: testStrings
   Definitions
      At line 35 in file Anagram.s
   Uses
      At line 25 in file Anagram.s
Comment: testStrings used once
while1 0000005C




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: while1
   Definitions
      At line 41 in file Anagram.s
   Uses
      At line 66 in file Anagram.s
Comment: while1 used once
while2 0000006C

Symbol: while2
   Definitions
      At line 46 in file Anagram.s
   Uses
      At line 51 in file Anagram.s
Comment: while2 used once
while3 0000008C

Symbol: while3
   Definitions
      At line 56 in file Anagram.s
   Uses
      At line 71 in file Anagram.s
Comment: while3 used once
17 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

TestData 00000000

Symbol: TestData
   Definitions
      At line 93 in file Anagram.s
   Uses
      None
Comment: TestData unused
stringA 00000000

Symbol: stringA
   Definitions
      At line 95 in file Anagram.s
   Uses
      At line 6 in file Anagram.s
      At line 36 in file Anagram.s

stringB 0000000B

Symbol: stringB
   Definitions
      At line 96 in file Anagram.s
   Uses
      At line 7 in file Anagram.s
      At line 37 in file Anagram.s
      At line 43 in file Anagram.s
      At line 74 in file Anagram.s

3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file Anagram.s
   Uses
      None
Comment: main unused
1 symbol
361 symbols in table
