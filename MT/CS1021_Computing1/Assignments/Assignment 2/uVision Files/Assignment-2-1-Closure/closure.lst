


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             Closure, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 EXPORT           start
    4 00000000         
    5 00000000         start
    6 00000000         
    7 00000000 E59F10D4        LDR              R1, =ASize  ;aCount = ASize
    8 00000004 E5911000        LDR              R1, [R1]    ;aCountCopy = [aCou
                                                            nt]
    9 00000008 E59F90D0        LDR              R9, =AElems ;aElemsCopy = copyA
                                                            ddress(aElems)
   10 0000000C E3A0A000        LDR              R10, =0     ;zeroFlag
   11 00000010 E3A0B004        LDR              R11, =4     ;counterMultiplier
   12 00000014         
   13 00000014         zeroCheck
   14 00000014 E3510001        CMP              R1, #1      ;if(aSize ==1)
   15 00000018 1A000002        BNE              while1      ;&& 
   16 0000001C E5994000        LDR              R4, [R9]    ;loadAElem
   17 00000020 E3540000        CMP              R4, #0      ;if (aElem == 0)
   18 00000024 0A000028        BEQ              closed
   19 00000028         
   20 00000028         while1
   21 00000028 E3510000        CMP              R1, #0      ;while(aCount!=0)
   22 0000002C 0A000026        BEQ              closed      ;{
   23 00000030 E5994000        LDR              R4, [R9]    ;get.testChar(aElem
                                                            sCopy)
   24 00000034 E3540000        CMP              R4, #0      ;if (testChar == 0)
                                                            
   25 00000038 1A000001        BNE              getNextChar ;{
   26 0000003C E2899004        ADD              R9, R9, #4  ; testCharAddress++
                                                            
   27 00000040 EAFFFFF8        B                while1
   28 00000044         
   29 00000044         getNextChar
   30 00000044 E59F2094        LDR              R2, =AElems
   31 00000048 E5926000        LDR              R6, [R2]    ;get.aChar(aElems)
   32 0000004C E59F7088        LDR              R7, =ASize
   33 00000050 E5977000        LDR              R7, [R7]    ;aSizeCopy
   34 00000054         
   35 00000054         while2
   36 00000054 E3570000        CMP              R7, #0      ;while(aSizeCopy!=0
                                                            )
   37 00000058 0A00001D        BEQ              notClosed   ;{
   38 0000005C E3540000        CMP              R4, #0      ; if(testChar == 0)
                                                            
   39 00000060 1A000002        BNE              additionTest ;{
   40 00000064 E2899004        ADD              R9, R9, #4  ; testCharAddress++
                                                            
   41 00000068 E2477001        SUB              R7, R7, #1  ; aSizeCopy --
   42 0000006C EAFFFFF8        B                while2
   43 00000070         
   44 00000070         additionTest
   45 00000070 E0843006        ADD              R3, R4, R6  ; result = testChar
                                                             + aChar
   46 00000074         
   47 00000074 E3530000        CMP              R3, #0      ;if(result != 0  
   48 00000078 0A000003        BEQ              continue    ;  &&
   49 0000007C E3570000        CMP              R7, #0      ; aCount =0)
   50 00000080 1A000001        BNE              continue    ;{



ARM Macro Assembler    Page 2 


   51 00000084 E3A00000        LDR              R0, =0      ; closed = 0
   52 00000088 EA000012        B                stop        ;}
   53 0000008C         
   54 0000008C         continue
   55 0000008C E3530000        CMP              R3, #0      ;else if(result !=0
                                                            
   56 00000090 0A000005        BEQ              continue2   ;  &&
   57 00000094 E3570000        CMP              R7, #0      ;     aCount != 0)
   58 00000098 0AFFFFED        BEQ              while2      ;{
   59 0000009C E2822004        ADD              R2, R2, #4  ; address++
   60 000000A0 E5926000        LDR              R6, [R2]    ; load(aChar)
   61 000000A4 E2477001        SUB              R7, R7, #1  ; aCountCopy--
   62 000000A8 EAFFFFE9        B                while2      ;}
   63 000000AC         
   64 000000AC         continue2
   65 000000AC E589A000        STR              R10, [R9]   ;storeZeroFlag
   66 000000B0 E0415007        SUB              R5, R1, R7  ;counter = aCount -
                                                             aCountCopy
   67 000000B4 E2411002        SUB              R1, R1, #2  ;aCount - 2
   68 000000B8 E005059B        MUL              R5, R11, R5 ;counter *= 4
   69 000000BC E0899005        ADD              R9, R9, R5  ;aAddress + counter
                                                            
   70 000000C0 E582A000        STR              R10, [R2]   ;storeZeroFlag()
   71 000000C4 E59F9014        LDR              R9, =AElems
   72 000000C8 EAFFFFD6        B                while1      ;}
   73 000000CC         
   74 000000CC         closed
   75 000000CC E3A00001        LDR              R0, =1      ; closed =0
   76 000000D0 EA000000        B                stop
   77 000000D4         
   78 000000D4         notClosed
   79 000000D4 E3A00000        LDR              R0, =0      ;notClosed = 1
   80 000000D8         
   81 000000D8         
   82 000000D8         
   83 000000D8         
   84 000000D8 EAFFFFFE 
                       stop    B                stop
   85 000000DC         
   86 000000DC         
   87 000000DC 00000000 
              00000000 
              00000000 
              00000000 
              00000000         AREA             TestData, DATA, READWRITE
   88 00000000         
   89 00000000 00000001 
                       ASize   DCD              1           ; Number of element
                                                            s in A
   90 00000004 00000001 
                       AElems  DCD              +1          ; Elements of A
   91 00000008         
   92 00000008                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\c
losure.d -o.\closure.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include
 -IC:\Keil_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --predefine="__MICROL
IB SETA 1" --predefine="__UVISION_VERSION SETA 521" --predefine="NO_CLOCK_SETUP
 SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC SETA 1" --pr
edefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\closure.lst Closu



ARM Macro Assembler    Page 3 


re.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Closure 00000000

Symbol: Closure
   Definitions
      At line 1 in file Closure.s
   Uses
      None
Comment: Closure unused
additionTest 00000070

Symbol: additionTest
   Definitions
      At line 44 in file Closure.s
   Uses
      At line 39 in file Closure.s
Comment: additionTest used once
closed 000000CC

Symbol: closed
   Definitions
      At line 74 in file Closure.s
   Uses
      At line 18 in file Closure.s
      At line 22 in file Closure.s

continue 0000008C

Symbol: continue
   Definitions
      At line 54 in file Closure.s
   Uses
      At line 48 in file Closure.s
      At line 50 in file Closure.s

continue2 000000AC

Symbol: continue2
   Definitions
      At line 64 in file Closure.s
   Uses
      At line 56 in file Closure.s
Comment: continue2 used once
getNextChar 00000044

Symbol: getNextChar
   Definitions
      At line 29 in file Closure.s
   Uses
      At line 25 in file Closure.s
Comment: getNextChar used once
notClosed 000000D4

Symbol: notClosed
   Definitions
      At line 78 in file Closure.s
   Uses
      At line 37 in file Closure.s
Comment: notClosed used once
start 00000000



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: start
   Definitions
      At line 5 in file Closure.s
   Uses
      At line 3 in file Closure.s
Comment: start used once
stop 000000D8

Symbol: stop
   Definitions
      At line 84 in file Closure.s
   Uses
      At line 52 in file Closure.s
      At line 76 in file Closure.s
      At line 84 in file Closure.s

while1 00000028

Symbol: while1
   Definitions
      At line 20 in file Closure.s
   Uses
      At line 15 in file Closure.s
      At line 27 in file Closure.s
      At line 72 in file Closure.s

while2 00000054

Symbol: while2
   Definitions
      At line 35 in file Closure.s
   Uses
      At line 42 in file Closure.s
      At line 58 in file Closure.s
      At line 62 in file Closure.s

zeroCheck 00000014

Symbol: zeroCheck
   Definitions
      At line 13 in file Closure.s
   Uses
      None
Comment: zeroCheck unused
12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

AElems 00000004

Symbol: AElems
   Definitions
      At line 90 in file Closure.s
   Uses
      At line 9 in file Closure.s
      At line 30 in file Closure.s
      At line 71 in file Closure.s

ASize 00000000

Symbol: ASize
   Definitions
      At line 89 in file Closure.s
   Uses
      At line 7 in file Closure.s
      At line 32 in file Closure.s

TestData 00000000

Symbol: TestData
   Definitions
      At line 87 in file Closure.s
   Uses
      None
Comment: TestData unused
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file Closure.s
   Uses
      None
Comment: main unused
1 symbol
356 symbols in table
